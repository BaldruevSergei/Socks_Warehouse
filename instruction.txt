
Аннотация к проекту "Socks Warehouse API"
Цель проекта:

Разработка REST API для управления складом носков с функционалом регистрации прихода, отпуска, фильтрации и обновления данных.

Реализованный функционал:
Регистрация прихода носков:
Метод: POST /api/socks/income
Позволяет увеличить количество носков на складе с указанием цвета, процента содержания хлопка и количества.

Регистрация отпуска носков:
Метод: POST /api/socks/outcome
Уменьшает количество носков на складе при достаточном остатке.

Фильтрация носков с дополнительными критериями:
Метод: GET /api/socks/filter
Поддерживает фильтрацию по цвету, содержанию хлопка (moreThan, lessThan, equal) и диапазону содержания хлопка.
Добавлена возможность сортировки по любому атрибуту (например, color, cottonPart, quantity).

Обновление данных о носках:
Метод: PUT /api/socks/{id}
Обновляет информацию о носках: цвет, процент содержания хлопка и количество.

Загрузка партии носков из файла:
Метод: POST /api/socks/batch
Поддерживает загрузку партии носков из файла формата .xlsx.

Централизованная обработка ошибок:
Реализована через @ControllerAdvice для возврата понятных сообщений о некорректных данных, недостатке носков на складе и ошибках загрузки файла.

Документация API:
Генерация документации реализована с использованием Swagger/OpenAPI.
Использование enum:
Для фильтрации носков API принимает тип операции (moreThan, lessThan, equal) в виде строки. Для повышения безопасности и читаемости кода, а также исключения ошибок с магическими строками, был создан enum FilterOperation.
Перечисление содержит допустимые значения операций и предоставляет метод fromString, который преобразует строку в соответствующий элемент enum.
Это упрощает обработку операций с использованием конструкции switch-case, исключает ошибки ввода и обеспечивает лёгкое расширение функционала фильтрации.


Инструменты и технологии:
Язык: Java 17
Фреймворк: Spring Boot 2.7
База данных: PostgreSQL
Сборка: Gradle
Логирование: SLF4J

Тестирование: JUnit 5 и Mockito
Уровень покрытия тестами:
Покрытие тестами: ~80%, включая тесты контроллеров, сервисов и обработки ошибок.

Результаты:
Проект обеспечивает удобный и безопасный функционал для управления складом носков. Использование enum, централизованной обработки ошибок и тестов делает приложение надежным и масштабируемым.

Есть 1 нерешенная проблема -  файл xmlx не подгружается через Сваггер через URL запрос.  До понедельника думаю решу вопрос. Спасибо. 

